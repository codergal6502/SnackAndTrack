// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SnackAndTrack.DatabaseAccess;

#nullable disable

namespace DatabaseAccess.Migrations
{
    [DbContext(typeof(SnackAndTrackDbContext))]
    [Migration("20250727220645_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.AmountMade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UnitId");

                    b.ToTable("AmountMade");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.FoodItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.FoodItemNutrient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<Guid>("FoodItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NutrientId")
                        .HasColumnType("uuid");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FoodItemId");

                    b.HasIndex("NutrientId");

                    b.HasIndex("UnitId");

                    b.ToTable("FoodItemNutrients");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.Nutrient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DefaultUnitId")
                        .HasColumnType("uuid");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DefaultUnitId");

                    b.ToTable("Nutrients");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.RecipeIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<Guid>("FoodItemId")
                        .HasColumnType("uuid");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FoodItemId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UnitId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.ServingSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<Guid>("FoodItemId")
                        .HasColumnType("uuid");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FoodItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("ServingSizes");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AbbreviationCsv")
                        .HasColumnType("text");

                    b.Property<bool>("CanBeFoodQuantity")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.UnitConversion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromUnitId")
                        .HasColumnType("uuid");

                    b.Property<float>("Ratio")
                        .HasColumnType("real");

                    b.Property<Guid>("ToUnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromUnitId");

                    b.HasIndex("ToUnitId");

                    b.ToTable("UnitConversions");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.AmountMade", b =>
                {
                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.Recipe", "Recipe")
                        .WithMany("AmountsMade")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.FoodItemNutrient", b =>
                {
                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.FoodItem", "FoodItem")
                        .WithMany("FoodItemNutrients")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.Nutrient", "Nutrient")
                        .WithMany("FoodItemNutrients")
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("Nutrient");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.Nutrient", b =>
                {
                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.Unit", "DefaultUnit")
                        .WithMany()
                        .HasForeignKey("DefaultUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultUnit");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.FoodItem", "FoodItem")
                        .WithMany()
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("Recipe");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.ServingSize", b =>
                {
                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.FoodItem", "FoodItem")
                        .WithMany("ServingSizes")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.UnitConversion", b =>
                {
                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.Unit", "FromUnit")
                        .WithMany("FromUnitConversions")
                        .HasForeignKey("FromUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnackAndTrack.DatabaseAccess.Entities.Unit", "ToUnit")
                        .WithMany("ToUnitConversions")
                        .HasForeignKey("ToUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUnit");

                    b.Navigation("ToUnit");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.FoodItem", b =>
                {
                    b.Navigation("FoodItemNutrients");

                    b.Navigation("ServingSizes");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.Nutrient", b =>
                {
                    b.Navigation("FoodItemNutrients");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.Recipe", b =>
                {
                    b.Navigation("AmountsMade");

                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("SnackAndTrack.DatabaseAccess.Entities.Unit", b =>
                {
                    b.Navigation("FromUnitConversions");

                    b.Navigation("ToUnitConversions");
                });
#pragma warning restore 612, 618
        }
    }
}
